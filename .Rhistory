find.package("devtools")
install.packages("devtools")
?install.packages
?install.packages
find.package("devtools")
back
return
> ?install.packages
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(devtools)
find_rtools()
pwd
pwd()
getwd()
cd C:/Users/Bia/Documents/Coursera
cd (C:/Users/Bia/Documents/Coursera)
C:/Users/Bia/Documents/Coursera
install.packages("swirl")
library("swirl")
swirl()
5 + 7
x<- 5 + 7
x
y<- x - 3
y
c(1.1, 9, 3.14)
c(1.1, 9, 3.14)
z<- c(1.1, 9, 3.14)
?c
z
w<- c(z, 555, z)
c(z, 555, z)
z * 2 +100
my_sqrt<- sqrt(z-1)
my_sqrt
my_div<- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 +1000
my_div
swirl()
getwd()
ls()
x<- 9
ls()
dir()
?list.files
args(list.files())
args(list.files)
old.dir<- "C:/Users/Bia/Documents"
old.dir<- getwd()
dir.create(testdir)
?dir.create
dir.create("C:/Users/Bia/Documents/testdir")
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R" "mytest2.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.r", "mytest3.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir3", filepath("testdir2"), recursive = TRUE)
dir.create("testdir3", file.path("testdir2"), recursive = TRUE)
dir.create( file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=o.5)
seq(0,10, by=0.5)
my_seq<- seq(5,10, length=30)
length(my_seq)
1:bye()
q()
clear(y)
y=null
y<- y
y()
y<- 1
q()
source(makeVector.R)
getwd()
source(makeVector.R)
source("makeVector.R")
makeVector
makeVector(1)
myMatrix <- matrix(c(1,8,-9,7,5,0,1,0,4,4,0,0,1,2,5,0,0,0,1,-5,0,0,0,0,1),nrow=5,ncol=5)
source("cachematrix1.R")
anotherMatrix <- cachematrix(myMatrix)
anotherMatrix <- cachematrix1(myMatrix)
source("cachematrix1.R")
anotherMatrix <- cachematrix1(myMatrix)
anotherMatrix <- makeCacheMatrix(myMatrix)
anotherMatrix$get()
anotherMatrix$getsolve()
cacheSolve(anotherMatrix)
?inv
?inverse
?getinverse
source("cachematrix.R")
myMatrix <- matrix(c(1,8,8,7,5,0,1,0,4,4,0,0,1,2,5,0,0,0,1,-5,0,0,0,0,1),nrow=5,ncol=5)
myMatrix
anotherMatrix <- makeCacheMatrix(myMatrix)
anotherMatrix
anotherMatrix$get
anotherMatrix$get()
anotherMatrix
myMatrix
anotherMatrix$get()
myMatrix <- matrix(c(1,8,-9,7,5,0,1,0,4,4,0,0,1,2,5,0,0,0,1,-5,0,0,0,0,1),nrow=5,ncol=5)
myMatrix
anotherMatrix$get()
anotherMatrix$getsolve()
source("cachematrix.R")
anotherMatrix$get()
myMatrix <- matrix(c(1,8,-9,7,5,0,1,0,4,4,0,0,1,2,5,0,0,0,1,-5,0,0,0,0,1),nrow=5,ncol=5)
myMatrix
anotherMatrix$get()
source("cachematrix.R")
myMatrix <- matrix(c(1,8,-9,7,5,0,1,0,4,4,0,0,1,2,5,0,0,0,1,-5,0,0,0,0,1),nrow=5,ncol=5)
anotherMatrix <- makeCacheMatrix(myMatrix)
anotherMatrix$get()
anotherMatrix$getinverse()
anotherMatrix$getsolve()
cacheSolve(anotherMatrix)
source("cachematrix.R")
cacheSolve(anotherMatrix)
source("cachematrix.R")
cacheSolve(anotherMatrix)
source("cachematrix.R")
cacheSolve(anotherMatrix)
class(anotherMatrix$get())
class(anotherMatrix$getsolve())
q()
